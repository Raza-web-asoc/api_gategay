http {
    upstream auth_service {
        server api:8000;
    }

    upstream pets_service {
        server raza-pets-ms:8000;
    }

    upstream images_service {
        server raza-images-ms:8000;
    }

    server {
        listen 80;

        # Verificación del token
        location /api/verify_token {
            if ($request_method = 'OPTIONS') {
                add_header Access-Control-Allow-Origin http://localhost:5173;
                add_header Access-Control-Allow-Methods "GET";
                add_header Access-Control-Allow-Headers "Authorization, Content-Type";
                add_header Access-Control-Allow-Credentials true;
                add_header Content-Length 0;
                return 204;
            }
            if ($http_authorization = "") {
                return 401 "Authorization header missing";
            }

            proxy_pass http://auth_service/token;

            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Signin
        location /api/signin {
            proxy_pass http://auth_service/signin;

            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Signup
        location /api/signup {
            if ($request_method = 'OPTIONS') {
                add_header Access-Control-Allow-Origin http://localhost:5173;
                add_header Access-Control-Allow-Methods "POST";
                add_header Access-Control-Allow-Headers "Authorization, Content-Type";
                add_header Access-Control-Allow-Credentials true;
                add_header Content-Length 0;
                return 204;
            }
            proxy_pass http://auth_service/signup;

            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Ruta protegida: Todos los endpoints de /api/pets
        location /api/pets {
            auth_request /api/verify_token;

            if ($request_method = 'OPTIONS') {
                add_header Access-Control-Allow-Origin http://localhost:5173;
                add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE";
                add_header Access-Control-Allow-Headers "Authorization, Content-Type";
                add_header Access-Control-Allow-Credentials true;
                add_header Content-Length 0;
                return 204;
            }

            # Obtener headers de microservicio de auth
            auth_request_set $auth_user_id $upstream_http_x_auth_user_id;
            auth_request_set $auth_user_role $upstream_http_x_auth_role;

            # Establecer los headers para enviarlos al microservicio
            proxy_set_header X-Auth-User-Id $auth_user_id;
            proxy_set_header X-Auth-Role $auth_user_role;

            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Redirigir dependiendo del endpoint después de /api/pets
            location /api/pets/mascotas {
                proxy_pass http://pets_service/mascotas/;
            }

            location /api/pets/razas {
                proxy_pass http://pets_service/razas/;
            }

            location /api/pets/especies {
                proxy_pass http://pets_service/especies/;
            }
        }

        #Imagenes
        location /api/upload-user-image {
            if ($request_method = 'OPTIONS') {
                add_header Access-Control-Allow-Origin http://localhost:5173;
                add_header Access-Control-Allow-Methods "POST";
                add_header Access-Control-Allow-Headers "Authorization, Content-Type";
                add_header Access-Control-Allow-Credentials true;
                add_header Content-Length 0;
                return 204;
            }
            proxy_pass http://images_service/upload-user-image;

            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location /api/get-user-image {
            if ($request_method = 'OPTIONS') {
                add_header Access-Control-Allow-Origin http://localhost:5173;
                add_header Access-Control-Allow-Methods "GET";
                add_header Access-Control-Allow-Headers "Authorization, Content-Type";
                add_header Access-Control-Allow-Credentials true;
                add_header Content-Length 0;
                return 204;
            }
            proxy_pass http://images_service/get-user-image;

            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Manejo de errores
        error_page 401 = @error_401;
        location @error_401 {
            return 401 "Unauthorized: Invalid or missing JWT";
        }
    }
}
events{}